"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

https://projecteuler.net/problem=12
"""
import time


def nth_triangle_num(n: int) -> int:
    """Returns nth triangle numnber using formula n(n+1)/2."""
    return int(n * (n + 1) / 2)


def num_divisors(n: int) -> int:
    """Returns the number of divisors of n using prime factors.

    If n = 2^a * 3^b * 5^c * ....
    The number of divisors = (a+1)(b+1)(c+1)...
    """
    prime_multiples = {}
    for i in range(len(prime_list)):
        counter = 0
        while n % prime_list[i] == 0:
            n = n // prime_list[i]
            counter += 1
        prime_multiples[prime_list[i]] = counter

    divisors = 1
    for k, v in prime_multiples.items():
        if v > 0:
            divisors *= v + 1

    return divisors


def triangle_divisors_over(x: int) -> int:
    """Returns the first triangle number with over x divisors."""
    maximum = 0
    i = 0
    while maximum <= x:
        i += 1
        divisors = num_divisors(nth_triangle_num(i))
        if divisors > maximum:
            maximum = divisors
    return nth_triangle_num(i)


def is_prime(x: int) -> bool:
    """Returns True if a number is a prime number."""
    return not any(x % i == 0 for i in range(2, x-1))


prime_list = [i for i in range(2, 65500) if is_prime(i)]
if __name__ == '__main__':
    t0 = time.time()
    print(triangle_divisors_over(500))
    print('Solved in {} seconds'.format(time.time()-t0))
